// Защита сервера COPART
// - раз в 5 минут проверка поддерживет ли клиент JS - подсовывается обфусцирофванный JS код, который вычисляет ключ сессии и закидывает в кукиесы
// - ключ сессии привязывается к IP
// - после успешной генерации ключа сессии несколько минут клиент с этого IP может делать запросы вообще без cookies
// - если серверу что то не понравится - блокирует по IP на пару часов
// - сайт на Ангуляре, есть JSON API - от куда и берем данные о лотах
//
// Защита сервера iaai
// - подсовывается обфусцирофванный JS код, который вычисляет ключ сессии и закидывает в кукиесы
// - запрещены запросы без ключа сессии
// - сайт без JSON API (данные парсим из HTML) данные лота
//
// Варианты решения
//
// Обоснование выбора решения
// вариант 1. Подключить зомби браузер на сервере через Slenium (достоинства - полноценный браузер обойдет все защиты, недостатки - каждый запрос неколько секунд, пока подымется браузер)
// вариант 2. На чистом NodeJs с pappytear (Хромиум) - недостаток, надо прокидывать порт и подымать сервер на NodeJS для обработки запросов
// вариант 3. PHP + NodeJs (php делает основные запросы, и если срабатывает защита раз в gzmn минут вызываем nodejs)
//
// Алгоритм обхода защиты сервера COPART
// 1. Делаем запрос PHP (с ИСХОДЯЩИМИ кукиесами которые получили в пп 4. или без них если нулевой шаг) ловим ВХОДЯЩИЕ кукесы
// 2. Если данне получены - выводим РЕЗУЛЬТАТ
// 3. Если данные не получены - вызываем Nodejs + ИСХОДЯЩИЕ кукиесы что поймали пп. 1, ловим ВХОДЯЩИЕ куки
// 4. Делаем финальный запрос PHP с ИСХОДЯЩИМИ кукиесами что поймали в п 3.
// 5. Выводим РЕЗУЛЬТАТ
// возможно также стоит переписать iaai для ускорения
